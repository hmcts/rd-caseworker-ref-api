#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "rd"
def component = "caseworker-ref-api"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-rd-caseworker-ref-api', 'CASEWORKER_REF_API_S2S_SECRET')
  ],
  'rd-${env}': [
    secret('CA-REF-OAUTH2-CLIENT-SECRET', 'CA_REF_OAUTH2_CLIENT_SECRET'),
    secret('CA-REF-OAUTH2-CLIENT-ID', 'CA_REF_OAUTH2_CLIENT_ID'),
    secret('LD-SDK-KEY', 'LD_SDK_KEY')

  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

// Vars for Kubernetes PACT
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
env.PACT_BROKER_PORT = "443"
env.PACT_BROKER_SCHEME = "https"

withPipeline(type, product, component) {

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    disableLegacyDeployment()
    enableAksStagingDeployment()

    before('functionalTest:preview') {
      env.execution_environment = "preview"
    }

    before('functionalTest:aat') {
      env.execution_environment = "aat"
    }
    // Sync demo and perftest with master branch
    syncBranchesWithMaster(branchesToSync)

    env.S2S_URL_FOR_TESTS = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.TEST_URL = "http://rd-caseworker-ref-api-aat.service.core-compute-aat.internal"

    after('integrationTest:preview') {
     steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('integrationTest:aat') {
     steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('pact-provider-verification') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    }

    after('pact-consumer-tests') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    }

    onMaster() {
        enablePactAs([
            AppPipelineDsl.PactRoles.PROVIDER,
            AppPipelineDsl.PactRoles.CONSUMER
        ])
    }
    onPR() {
        enablePactAs([
                AppPipelineDsl.PactRoles.PROVIDER,
                AppPipelineDsl.PactRoles.CONSUMER
        ])
    }
}