import org.springframework.boot.loader.tools.LoaderImplementation

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
  }
}

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.63'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.51.0'//do not change this
    id "info.solidsoft.pitest" version '1.15.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'org.springframework.boot' version '3.3.4'
    id "org.flywaydb.flyway" version '9.22.3'
    id 'au.com.dius.pact' version '4.1.7' // do not change, otherwise serenity report fails
    id 'org.owasp.dependencycheck' version '10.0.4'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
  lombok             : '1.18.34',
  gradlePitest       : '1.5.1',
  pitest             : '1.16.1',
  reformHealthStarter: '0.0.5',
  reformLogging      : '6.1.5',
  serenity           : '2.0.76',
  sonarPitest        : '0.5',
  pact_version       : '4.1.7',
  launchDarklySdk    : '5.10.9',
  restAssured        : '4.3.3',
  log4j              : '2.24.1',
  poi                : '4.1.2',
  reformS2sClient    : '5.2.0',
  tc_postgresql      : '1.20.2',
  bouncycastle       : '1.78.1',
  junit              : '5.11.2',
  junitPlatform      : '1.11.2'
]

ext {
  springCloudVersion = '2023.0.3'
}

mainClassName = 'uk.gov.hmcts.reform.cwrdapi.CaseWorkerRefApiApplication'
def jarName = 'rd-caseworker-ref-api.jar'

group = 'uk.gov.hmcts.reform.rdcaseworker'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.00
      }
    }
  }
}

check.dependsOn jacocoTestCoverageVerification

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

sourceSets {

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

  pactTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/pactTest/java')
    }
    resources.srcDir file('src/pactTest/resources')
  }
}

idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
  }
}

configurations {
  integrationTestImplementation.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestImplementation.extendsFrom testCompile
  functionalTestRuntimeOnly.extendsFrom testRuntime
  contractTestImplementation.extendsFrom testCompile
  contractTestRuntimeOnly.extendsFrom testRuntime
  pactTestImplementation.extendsFrom testCompile
  pactTestRuntime.extendsFrom testRuntime
}


pmd {
  toolVersion = '6.55.0'
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'category/java/errorprone.xml',
    'category/java/bestpractices.xml'
  ]
}


task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  finalizedBy aggregate
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

  systemProperty "scenario", System.getProperty('scenario')

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  finalizedBy aggregate
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  schemas = ['dbrdcaseworker']
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

task contract(type: Test) {
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/cwrdapi/**"
  systemProperty 'pact.rootDir', "pacts"
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/cwrdapi/**"
  systemProperty 'pact.rootDir', "pacts"
}

task fortifyScan(type: JavaExec)  {
  mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // This is a temporary fix to prevent the nightly build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:9292'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

//Provider PACT tasks
task contractTest(type: Test) {
  logger.lifecycle("Runnning contract Tests")
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs pact Tests")
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  if (project.hasProperty('pact.verifier.publishResults')) {
    systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
  }
  systemProperty 'pact.provider.version', project.pactVersion
  include "uk/gov/hmcts/reform/cwrdapi/*ProviderTest*"
  exclude "uk/gov/hmcts/reform/cwrdapi/*ConsumerTest*"
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify

jacoco {
  toolVersion = "0.8.12"
}

jacocoTestReport {
  executionData(test,integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '1.2.1'
  targetClasses = ['uk.gov.hmcts.reform.*']
  testSourceSets = [sourceSets.test]
  excludedClasses = [
    'uk.gov.hmcts.reform.cwrdapi.config.*',
    'uk.gov.hmcts.reform.cwrdapi.controllers.*',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.CaseWorkerDeleteServiceImpl',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.ValidationServiceFacadeImpl',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.CaseWorkerServiceImpl',
    'uk.gov.hmcts.reform.cwrdapi.CaseWorkerRefApiApplication',
    'uk.gov.hmcts.reform.cwrdapi.servicebus.TopicPublisher'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 75
  verbose = false
}


project.tasks['pitest'].group = "Verification"

sonarqube {
  properties {
    property "sonar.projectName", "reform::rd-caseworker-ref-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:reform::rd-caseworker-ref-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/cwrdapi/config/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/client/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/controllers/request/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/CaseWorkerRefApiApplication.java"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencies {

  implementation group: 'org.apache.poi', name: 'poi', version: versions.poi
  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: versions.poi
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.4'
  implementation group: 'org.springframework.security', name: 'spring-security-core'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-security'

  implementation group: 'org.springframework', name: 'spring-core'
  implementation group: 'org.springframework', name: 'spring-beans'
  implementation group: 'org.springframework', name: 'spring-aop'
  implementation group: 'org.springframework', name: 'spring-aspects'
  implementation group: 'org.springframework', name: 'spring-context'
  implementation group: 'org.springframework', name: 'spring-context-support'
  implementation group: 'org.springframework', name: 'spring-expression'
  implementation group: 'org.springframework', name: 'spring-jcl'
  implementation group: 'org.springframework', name: 'spring-jdbc'
  implementation group: 'org.springframework', name: 'spring-orm'
  implementation group: 'org.springframework', name: 'spring-tx'
  implementation group: 'org.springframework', name: 'spring-web'
  implementation group: 'org.springframework', name: 'spring-webmvc'

  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: versions.bouncycastle

  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'
  testImplementation 'net.serenity-bdd:serenity-rest-assured:3.8.1'
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: '3.8.1'
  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.9'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.reformS2sClient
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
  implementation group: 'com.fasterxml.jackson', name: 'jackson-bom'
  implementation group: 'org.jetbrains', name: 'annotations', version: '13.0'
  implementation group: 'javax.inject', name: 'javax.inject', version: '1'
  implementation 'com.github.hmcts:idam-java-client:2.1.1'
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.41.2'
  implementation group: 'org.flywaydb', name: 'flyway-core'
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql'
  implementation group: 'org.postgresql', name: 'postgresql'

  implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
  //Added org.glassfish to support javax.el
  implementation group: 'org.glassfish', name: 'javax.el', version: '3.0.0'
  implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.2.1'

  implementation group: 'com.microsoft.azure', name: 'applicationinsights-runtime-attach', version: '3.6.0'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.6.0'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  implementation group: 'com.azure', name: 'azure-core', version: '1.53.0'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.4'
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

  implementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
  implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'
  implementation "io.github.openfeign:feign-httpclient:11.10"
  implementation "com.github.hmcts.java-logging:logging:${versions.reformLogging}"

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
  // https://mvnrepository.com/artifact/net.minidev/json-smart
  implementation group: 'net.minidev', name: 'json-smart', version: '2.5.1'


  testImplementation ('com.github.hmcts:rd-commons-lib:0.0.18'){
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
  }
  //Fix for CVE-2021-29425
  implementation 'commons-io:commons-io:2.17.0'
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation("org.hamcrest:hamcrest-junit:2.0.0.0") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
    exclude group: "org.hamcrest", module: "hamcrest-library"
  }

    testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.tc_postgresql
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.tc_postgresql
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.tc_postgresql
    testImplementation('com.github.tomakehurst:wiremock:2.35.2') {
      exclude group: 'com.github.jknack'
    }
  testImplementation ("org.mockito:mockito-core:4.11.0") {
    exclude group: "net.bytebuddy", module: "byte-buddy"
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  }
  testImplementation ("org.mockito:mockito-inline:4.11.0") {
    exclude group: "net.bytebuddy", module: "byte-buddy"
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  }
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.15.4'
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.15.4'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.11.0'



  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.3'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0'
  testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  testImplementation 'io.github.openfeign:feign-jackson:12.5'
  testImplementation group: 'com.github.mifmif', name: 'generex', version: '1.0.2'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework', name: 'spring-test'
  testImplementation('com.opentable.components:otj-pg-embedded:0.13.4')


  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: versions.poi
  //Fix for CVE-2021-35515, CVE-2021-35516, CVE-2021-35517, CVE-2021-36090
  implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.27.1'


  contractTestImplementation (group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version)
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version

  functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.2'
  functionalTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  functionalTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  functionalTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  smokeTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  smokeTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  smokeTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  integrationTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  integrationTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  integrationTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  pactTestImplementation sourceSets.main.runtimeClasspath
  pactTestImplementation sourceSets.test.runtimeClasspath
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencyCheck {
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

gradle.startParameter.continueOnFailure = true

bootJar {
  loaderImplementation = LoaderImplementation.CLASSIC
  archiveFileName = jarName
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        // Remedy for CVE-2020-8908, ensures launchdarkly uses correct version
        if (details.requested.group == 'com.google.guava'
                && details.requested.name == 'guava') {
            details.useVersion "32.1.1-jre"
        }
    }

    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.bouncycastle'
                && (details.requested.name == 'bcpkix-jdk18on'
                || details.requested.name == 'bcprov-jdk18on')
        ){
            details.useVersion versions.bouncycastle
        }
    }

  resolutionStrategy.eachDependency { details ->
    // Remedy for CVE-2024-25710
    if (details.requested.group == 'org.apache.commons'
            && details.requested.name == 'commons-compress') {
      details.useVersion "1.26.0"
    }
  }
}

dependencies {
    modules {
        module("org.bouncycastle:bcpkix-jdk15on") {
            replacedBy("org.bouncycastle:bcpkix-jdk18on")
        }
        module("org.bouncycastle:bcprov-jdk15on") {
            replacedBy("org.bouncycastle:bcprov-jdk18on")
        }
    }
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed applications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}
