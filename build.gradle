import org.springframework.boot.loader.tools.LoaderImplementation

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id "info.solidsoft.pitest" version '1.15.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'org.springframework.boot' version '3.3.7'
    id "org.flywaydb.flyway" version '9.22.3'
    id 'au.com.dius.pact' version '4.6.17'
    id 'org.owasp.dependencycheck' version '12.1.6'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.34'
}

def versions = [
  commonsCompress    : '1.27.1',
  commonsIo          : '2.20.0',
  commonsLang3       : '3.17.0',
  lombok             : '1.18.38',
  reformHealthStarter: '0.0.5',
  reformLogging      : '6.1.9',
  sonarPitest        : '0.5',
  jackson            : '2.18.2',
  junitPitest        : '1.2.1',
  pact_version       : '4.6.16',
  launchDarklySdk    : '5.10.9',
  restAssured        : '4.3.3',
  log4j              : '2.25.2',
  poi                : '4.1.2',
  reformS2sClient    : '5.3.3',
  tc_postgresql      : '1.20.5',
  bouncycastle       : '1.81',
  junit              : '5.11.4',
  junitPlatform      : '1.11.4',
  serenity           : '4.2.34',
]

ext {
  springCloudVersion = '2023.0.6'
}

application {
  mainClass = 'uk.gov.hmcts.reform.cwrdapi.CaseWorkerRefApiApplication'

  // this is required to force Java running on the Azure Windows Server OS into using
  // UTF-8 as the default character set instead of windows-1252 which causes issues.
  // this setting only applies when running via gradle bootRun -- see web.config for the
  // java flag that configures the deployed applications
  applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}
def jarName = 'rd-caseworker-ref-api.jar'

group = 'uk.gov.hmcts.reform.rdcaseworker'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.00
      }
    }
  }
}

check.dependsOn jacocoTestCoverageVerification

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

sourceSets {

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

  pactTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/pactTest/java')
    }
    resources.srcDir file('src/pactTest/resources')
  }
}

idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
  }
}

configurations {
  integrationTestImplementation.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestImplementation.extendsFrom testCompile
  functionalTestRuntimeOnly.extendsFrom testRuntime
  contractTestImplementation.extendsFrom testCompile
  contractTestRuntimeOnly.extendsFrom testRuntime
  pactTestImplementation.extendsFrom testCompile
  pactTestRuntime.extendsFrom testRuntime
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'category/java/errorprone.xml',
    'category/java/bestpractices.xml'
  ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  finalizedBy aggregate
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

  systemProperty "scenario", System.getProperty('scenario')

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
  finalizedBy aggregate
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  schemas = ['dbrdcaseworker']
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

task contract(type: Test) {
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/cwrdapi/**"
  systemProperty 'pact.rootDir', "pacts"
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
  useJUnitPlatform()
  dependsOn(contract)
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/cwrdapi/**"
  systemProperty 'pact.rootDir', "pacts"
  finalizedBy(pactPublish)
}

task fortifyScan(type: JavaExec)  {
  main("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // This is a temporary fix to prevent the nightly build from failing if the Fortify scan detects issues
  ignoreExitValue = true as JavaExecSpec
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:9292'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:9292'
    version = project.pactVersion
  }
}

// a workaround to avoid issue with pactPublish missing non-optional property
pactPublish {
  pactPublish = project.pact.publish
}

//Provider PACT tasks
task contractTest(type: Test) {
  logger.lifecycle("Runnning contract Tests")
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs pact Tests")
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  if (project.hasProperty('pact.verifier.publishResults')) {
    systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
  }
  systemProperty 'pact.provider.version', project.pactVersion
  include "uk/gov/hmcts/reform/cwrdapi/*ProviderTest*"
  exclude "uk/gov/hmcts/reform/cwrdapi/*ConsumerTest*"
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify

jacoco {
  toolVersion = "0.8.13"
}

jacocoTestReport {
  executionData(test,integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = versions.junitPitest
  targetClasses = ['uk.gov.hmcts.reform.*']
  testSourceSets = [sourceSets.test]
  excludedClasses = [
    'uk.gov.hmcts.reform.cwrdapi.config.*',
    'uk.gov.hmcts.reform.cwrdapi.controllers.*',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.CaseWorkerDeleteServiceImpl',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.ValidationServiceFacadeImpl',
    'uk.gov.hmcts.reform.cwrdapi.service.impl.CaseWorkerServiceImpl',
    'uk.gov.hmcts.reform.cwrdapi.CaseWorkerRefApiApplication',
    'uk.gov.hmcts.reform.cwrdapi.servicebus.TopicPublisher'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 75
  verbose = false
}

project.tasks['pitest'].group = "Verification"

sonarqube {
  properties {
    property "sonar.projectName", "reform::rd-caseworker-ref-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:reform::rd-caseworker-ref-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/cwrdapi/config/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/client/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/controllers/request/**," +
                "src/main/java/uk/gov/hmcts/reform/cwrdapi/CaseWorkerRefApiApplication.java"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}

configurations.configureEach {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.name == 'commons-lang3') {
      details.useVersion versions.commonsLang3
    }
    if (details.requested.name == 'commons-compress') {
      details.useVersion versions.commonsCompress
    }
  }
}

dependencies {
  implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
  implementation group: 'org.apache.poi', name: 'poi', version: versions.poi
  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: versions.poi

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'

  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: versions.bouncycastle
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.2'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.reformS2sClient
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.5.0'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: versions.jackson
  implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  implementation 'com.github.hmcts:idam-java-client:3.0.4'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.48'
  implementation group: 'org.flywaydb', name: 'flyway-core'
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql'
  implementation group: 'org.postgresql', name: 'postgresql'

  implementation group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'
  implementation group: 'jakarta.el', name: 'jakarta.el-api', version: '6.0.1'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.2.1'

  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.7.4'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-runtime-attach', version: '3.7.5'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.7.4'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  implementation group: 'com.azure', name: 'azure-core', version: '1.56.1'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.15'
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.13.2'

  implementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
  implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'
  implementation "io.github.openfeign:feign-httpclient:13.6"
  implementation "com.github.hmcts.java-logging:logging:${versions.reformLogging}"
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  testImplementation group: 'com.github.hmcts', name: 'rd-commons-lib', version: '0.1.2'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  contractTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  contractTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation("org.hamcrest:hamcrest-junit:2.0.0.0") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
    exclude group: "org.hamcrest", module: "hamcrest-library"
  }

  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.tc_postgresql
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.tc_postgresql
  testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.tc_postgresql
  testImplementation group: 'org.wiremock', name: 'wiremock', version: '3.13.1'
  testImplementation ("org.mockito:mockito-core:4.11.0") {
    exclude group: "net.bytebuddy", module: "byte-buddy"
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  }
  testImplementation ("org.mockito:mockito-inline:4.11.0") {
    exclude group: "net.bytebuddy", module: "byte-buddy"
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  }
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.17.7'
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.17.7'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.11.0'

  testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.3'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest

  testImplementation 'io.github.openfeign:feign-jackson:13.6'
  testImplementation group: 'com.github.mifmif', name: 'generex', version: '1.0.2'
  testImplementation 'com.github.hmcts:fortify-client:1.4.10:all'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version

  functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  functionalTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  functionalTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  functionalTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  smokeTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  smokeTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  smokeTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  integrationTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  integrationTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  integrationTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  pactTestImplementation sourceSets.main.runtimeClasspath
  pactTestImplementation sourceSets.test.runtimeClasspath
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencyCheck {
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

gradle.startParameter.continueOnFailure = true

bootJar {
  loaderImplementation = LoaderImplementation.CLASSIC
  archiveFileName = jarName
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

dependencies {
    modules {
        module("org.bouncycastle:bcpkix-jdk15on") {
            replacedBy("org.bouncycastle:bcpkix-jdk18on")
        }
        module("org.bouncycastle:bcprov-jdk15on") {
            replacedBy("org.bouncycastle:bcprov-jdk18on")
        }
    }
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}
